@page "/search"
@rendermode InteractiveServer

@using MagicCollectors.App.Components.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Authorization

@inject AuthenticationStateProvider authenticationState
@inject UserManager<ApplicationUser> userManager
@inject ICardSvc cardSvc
@inject ICollectionSvc collectionSvc

<PageTitle>Search</PageTitle>

<div>
    <form @onsubmit="SearchForCards">
        <input type="text" id="txtSearch" @bind="@searchTerm" />
    </form>
</div>

@if(searchResult == null)
{
    <div>Loading...</div>
}
else if(!searchResult.Any())
{
    <div>No cards found</div>
}
else
{
    if(user != null)
    {
        <form @onsubmit="UpdateCards">
            <button>Update collection</button>
            @foreach (var card in searchResult)
            {
                <Card card="card" user="user" showSet="true" />
            }
        </form>
    }
    else
    {
        @foreach (var card in searchResult)
        {
            <Card card="card" user="user" showSet="true" />
        }        
    }
}

@code
{
    private ApplicationUser user = default!;
    private List<CollectionCard> searchResult = new List<CollectionCard>();
    private string? searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState.GetAuthenticationStateAsync();
        var authUser = authState.User;
        if (authUser.Identity.IsAuthenticated)
        {
            user = await userManager.FindByNameAsync(authUser.Identity.Name);
        }
    }

    private async Task SearchForCards()
    {
        searchResult = null;
        if (searchTerm != null && searchTerm.Length > 3)
        {
            searchResult = await cardSvc.Search(searchTerm, user);
            searchResult = searchResult.OrderBy(x => x.Card.Set.ReleaseDate).OrderBy(x => x.Card.Name).ToList();
        }
    }

    private async Task UpdateCards()
    {
        await collectionSvc.Update(user, searchResult);
    }
}