@rendermode InteractiveServer

@inject ICardSvc cardSvc;



<div>
    <div class="set-header">

        <div class="grid-child">
            <h3>@set.Set.Name <img src="@set.Set.IconSvgUri" height="18" /></h3>
            Count: @set.Count (@set.ValueOfOwnedCards USD) / Missing: @set.Missing (@set.CostOfMissingCards USD)
        </div>

        <div class="grid-child header-button">

            <form @onsubmit="GetCards">
                <button>Show cards</button>
            </form>
            <form @onsubmit="UpdateCollection">
                <button>Update collection</button>
            </form>
        </div>
    </div>

    <div v-show="showCards">

        <div class="cards-header">
            <div class="grid-child">No.</div>
            <div class="grid-child">Name</div>
            <div class="grid-child card-numbers">
                Normal <br />
                Has / Wants / Price
            </div>
            <div class="grid-child card-numbers">
                Foil <br />
                Has / Wants / Price
            </div>
            <div class="grid-child card-numbers">
                Etched <br />
                Has / Wants / Price
            </div>
        </div>

        @foreach (var card in cards)
        {
            <div>
                <Card card="card" user="user" />
            </div>
        }
    </div>
</div>

<style>
    .set-header {
        display: grid;
        grid-template-columns: 5fr 1fr;
        border: 1px solid black;
        padding: 5px;
    }

    .header-button {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .cards-header {
        display: grid;
        grid-template-columns: 1fr 6fr 2fr 2fr 2fr;
    }

    .card-numbers {
        /*text-align: center;*/
    }
</style>

@code {
    [Parameter]
    public CollectionSet set { get; set; }
    [Parameter]
    public ApplicationUser user { get; set; }
    protected List<CollectionCard> cards { get; set; } = new List<CollectionCard>();
    
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        // The list of cards must be reset when a new set is loaded in the component
        cards = new List<CollectionCard>();
        await base.SetParametersAsync(parameters);
    }

    protected async Task GetCards()
    {
        cards = await cardSvc.Get(set.Set, user);
    }

    protected async Task UpdateCollection()
    {
        cards = await cardSvc.Get(set.Set, user);
    }
}